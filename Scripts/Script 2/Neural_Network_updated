import pandas as pd
from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from google.colab import files
uploaded = files.upload()
from tensorflow.keras import layers
from tensorflow import keras
from tensorflow.keras import initializers
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, confusion_matrix, plot_confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
def reorganizeData(data):
  df2 = pd.read_csv(data)
  df = pd.read_csv(data)
  df2 = df2.loc[:,~df.columns.str.contains('output', case=False)]
  df = df.loc[:,~df.columns.str.contains('e', case=False)]
  df = df.loc[:,~df.columns.str.contains('c', case=False)]
  df = df.loc[:,~df.columns.str.contains('s', case=False)]
  df = df.loc[:,~df.columns.str.contains('a', case=False)]
  y_val = df.to_numpy()
  x_val = df2.to_numpy()
  x_train,x_test,y_train,y_test = train_test_split(x_val, y_val, test_size= 0.15)
def createNN():  
  model = keras.Sequential()
  model.add(layers.Dense(20, activation="sigmoid", input_shape=(13,),kernel_initializer='normal'))
  model.add(layers.Dense(15, activation="sigmoid" ))
  model.add(layers.Dense(1,activation = 'sigmoid'))
  model.compile(optimizer="adam",loss="mse")
  model.summary()
def runAndResults():  
  history= model.fit(x_train,y_train,epochs=200,verbose=1)
  print(history.history.keys())
  model.evaluate(x_test,y_test)
  y_pred = model.predict(x_test)
  y_f = y_pred.round()
  cm = confusion_matrix(y_test,y_f)
  cm_display = ConfusionMatrixDisplay(cm,display_labels='value').plot()
  accuracy = accuracy_score(y_test,y_f)
  print(accuracy)
def runProgram(data):
  reorganizeData(data)
  createNN()
  runAndResults() 

runProgram("test.csv") 
